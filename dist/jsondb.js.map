{"version":3,"sources":["jsondb.js"],"names":[],"mappings":"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","file":"jsondb.js","sourcesContent":["// > Copyright (c) 2012-2015 Iwan van der Kleijn\n// > All rights reserved.\n//\n// > This source code is licensed under the BSD-style license found in the LICENSE file in the root directory of this source tree\n// \n// This file is part of [Remedata](remedata.html)\n\n// Import standard ES6 API\nimport * as corejs from 'core-js';\nimport * as fs from 'fs';\n\n// Do not test for falsity, 0 and [] are perfectly valid values, but do test if variable is null or undefined \nexport let isNone = function(data){\n  return ((data === null) || (typeof data == 'undefined'));\n};\n\n// Represents JSON file, as an in-memory database table. Mutations are written to disk.\nclass JsonDb {\n\n    // constructor (path to JSON file: string), (property-name used to store key: any): void\n    constructor(path, id){\n      this.path = path;\n      this.id = id;\n      this.data = null;\n    }\n\n    get Id() {\n      return this.id;\n    }\n\n    // Retrieve array with all elements / items ('records') \n    getAll(callback){\n        // Directly return data if already loaded in-memory\n        if (!(isNone(this.data))){\n          callback(null, this.data);\n        } else { \n          // If table not initialized, load from disk         \n          fs.readFile(this.path, {encoding: 'utf8'},(err, data) =>\n                      {\n                        if (err){\n                          this.data = null;\n                          callback(err);\n                        } else{\n                          try {\n                            // convert JSON string to JavaScript object. \n                            this.data = JSON.parse(data);\n                            callback(null, this.data);\n\n                          } catch(error){\n                            // Catch error in case of conversion errors.\n                            this.data = null;\n                            callback(error);\n                          }\n                        }\n                      });\n        }\n    }\n\n  // private method; get element by value of the default key\n  _getByKey(key){\n\n    return this.data.find((e)=>{\n      return (e[this.id] == key);\n    });\n  }\n\n  // Load data from disk if not present in memory\n  _guaranteeData(callback){\n    \n    if (isNone(this.data)){\n     \n      this.getAll((err, data)=>{\n        if (err){\n          callback(err);\n        }else {\n          callback(null, data);\n        }\n      });\n    } else {\n      callback(null, this.data);\n    }\n  }\n\n  // remove item from table\n  deleteBy(key, callback){\n    // load data from file if not loaded in memory\n    this._guaranteeData((err, data)=>{\n      if (err){\n        callback(err);\n      }else {\n        let l0 = this.data.length;\n        // Remove the item from the in-memory collection\n        this.data = data.filter((e)=> {\n          return !(e[this.id] == key)\n        });\n        // Determine if the element was removed or not\n        let deleted = (l0 != this.data.length);\n\n        // flush changes to disk\n        this.saveAll(this.data, (err)=>{\n          \n          callback(err, deleted);\n        });\n      }\n    });\n  }\n\n  // Get one item from Table\n  getBy(key, callback){\n\n    this._guaranteeData((err, data)=>{\n      if (err){\n        callback(err);\n      }else {\n        let res = this._getByKey(key);\n        callback(null, res);\n      }\n    });\n  }\n\n  // Save item to collection, overwriting an existing item and otherwise inserting it. Changes are flushed to disk.\n  save(item, callback){\n    this._guaranteeData((err, data)=>{\n      if (err){\n        callback(err);\n      }else {\n\n        let succes = false;\n        // map over collection, replacing an existing item with the new ('changed') one\n        this.data = data.map((e)=>{\n          if(e[this.id] == item[this.id]){\n            succes = true;\n            return item;\n          } else{\n            return e;\n          }\n        });\n        // If not existing item was found, the new item is considered to be truly new and \n        // appended to the table\n        if (!succes){\n          this.data.push(item);\n        }\n        // Data flushed to disk\n        this.saveAll(this.data, (err)=>{\n          callback(err, item);\n        });\n      }\n    });\n  }\n  // Save an Array to table, overwriting existing content \n  saveAll(data, callback){\n\n    // Arguments validations. 'Data' MUST be an array.\n    if (isNone(data)){\n      callback(new Error('Invalid parameters'));\n    }\n    if (!(data instanceof Array)){\n      callback(new Error('Data needs to be an Array'));\n    }\n    this.data = data;\n    fs.writeFile(this.path, JSON.stringify(data), {encoding: 'utf8'}, (err) => {\n\n      callback(err, data);\n    });\n  }  \n}\n\n\n// Public interface: factory function. \nexport let jsondb = function(path, options){\n  let config = options || {};\n  let id = config.id || 'id';\n  return new JsonDb(path, id);\n};\n\n\n// Some examples.....\n/*\nlet path = \"data/_data.json\";\nlet db = jsondb(path, {key: \"id\"});\n\ndb.getAll(function(err, data){\n  console.log('in getAll', err, data, this);\n });\n\ndb.getBy(1, function(err, data){\n  console.log(\"Get by: \", err, data);\n});\n\n\ndb.getAll(function(err, data){\n  console.log('in getAll', err, data);\n  if (err) return;\n  let d = data;\n  d.push({\n    id: 7,\n    name: \"Basje\",\n    surname: \"Goris\",\n    age: 26\n  });\n  db.saveAll(d, function(err){\n    console.log(err);\n    if(err) return;\n    db.getAll(function(err, data){\n      \n      console.log(\"2nd getAll\", err, data);\n    });\n  });\n});\n\ndb.getBy(4, (err, item)=>{\n  if(err) {\n    console.log(\"error: \", err);\n    return;\n  }\n  item.name = \"BasjeMAN\";\n  db.save(item, (err)=>{\n    if(err) {\n    console.log(\"error: \", err);\n      return;\n    } \n  });\n});\n\ndb.deleteBy(1, (err)=> {\n  if(err) {\n    console.log(\"error: \", err);\n    return;\n  }\n});\n*/\n"],"sourceRoot":"/source/"}